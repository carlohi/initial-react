{"version":3,"sources":["serviceWorker.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","value","GifGridItem","img","className","src","url","alt","title","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","setstate","useEffect","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uLAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,kBC7FpDC,EAAa,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAY3C,OACI,oCACA,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC5CN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,SAbD,SAAEN,GACxBF,EAAcE,EAAEO,OAAOC,QAY6BA,MAAOX,OChBtDY,EAAc,SAAC,GAAW,IAAVC,EAAS,EAATA,IACzB,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,2BAAIL,EAAIK,S,uBCJPC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbL,EADa,0FAC4EM,UAAUF,GADtF,sBAEAG,MAAMP,GAFN,cAEbQ,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAQD,EAAKE,KAAI,SAAAf,GAAQ,IAAD,EAC1B,MAAO,CACHgB,GAAIhB,EAAIgB,GACRX,MAAOL,EAAIK,MACXF,IAAG,UAAEH,EAAIiB,cAAN,aAAE,EAAYC,iBAAiBf,QARvB,kBAWZW,GAXY,4CAAH,sDCEPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAGdM,ECJiB,SAACN,GAAc,IAAD,EAEZrB,mBAAS,CAAC2B,KAAK,GAAGO,SAAQ,IAFd,mBAE/B5C,EAF+B,KAExB6C,EAFwB,KAatC,OATAC,qBAAW,WACPhB,EAAQC,GAAUrC,MAAK,SAAAqD,GACnBF,EAAS,CACLR,KAAKU,EACLH,SAAQ,SAGlB,CAACb,IAEI/B,EDTQgD,CAAajB,GAArBM,KAGP,OACI,oCACA,4BAAKN,GACL,yBAAKN,UAAU,aAEHY,EAAKE,KAAK,SAAAf,GAAG,OACb,kBAAC,EAAD,CAAayB,IAAKzB,EAAIgB,GAAIhB,IAAKA,UEXtC0B,EAAe,WAAO,IAAD,EAEMxC,mBAAS,CAAC,iBAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAIhC,OACE,6BACE,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEMS,EAAWqB,KAAK,SAAAR,GAAQ,OACtB,kBAAC,EAAD,CAASkB,IAAKlB,EAAUA,SAAWA,QAI3C,+BCdNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPYnB,SAAkBjE,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiE,IAAIC,GAAwBzE,OAAOC,SAASyE,MACpDC,SAAW3E,OAAOC,SAAS0E,OAIvC,OAGF3E,OAAO4E,iBAAiB,QAAQ,WAC9B,IAAMvE,EAAK,UAAMoE,GAAN,sBAEP3E,IAgEV,SAAiCO,EAAOC,GAEtC4C,MAAM7C,EAAO,CACXwE,QAAS,CAAE,iBAAkB,YAE5BnE,MAAK,SAAAoE,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3E,UAAUC,cAAc2E,MAAMzE,MAAK,SAAAC,GACjCA,EAAayE,aAAa1E,MAAK,WAC7BV,OAAOC,SAASoF,eAKpBjF,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAmE,CAAwBjF,EAAOC,GAI/BC,UAAUC,cAAc2E,MAAMzE,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OOlC/BE,I","file":"static/js/main.a240d0e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory= ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = ( e ) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n        if(inputValue.trim().length > 2){\r\n            setCategories( categories => [inputValue,...categories]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" onChange={handleInputChange} value={inputValue}/>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({img}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=c1AR1jg6oM4HDe2HZAeUcs4IXrN31EST&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs  = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const {data} = useFetchGifs(category);\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        <div className=\"card-grid\">\r\n                {\r\n                    data.map( img => (\r\n                    <GifGridItem key={img.id} img={img}></GifGridItem>\r\n                    ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setstate] = useState({data:[],loading:true});\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then(imgs => {\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            })\r\n        });\r\n    },[category])\r\n\r\n    return state;\r\n}\r\n","import React,{useState} from \"react\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([\"Transformers\"]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={setCategories}></AddCategory>\r\n      <ol>\r\n        {\r\n            categories.map( category => (\r\n              <GifGrid key={category} category={ category } />\r\n            ))\r\n        }\r\n      </ol>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}